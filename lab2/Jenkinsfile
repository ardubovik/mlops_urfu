pipeline {
    agent any

    stages {
        stage('Setup Python Environment') {
            steps {
                script {
                    echo 'Creating a virtual environment, if not created'
                    sh '''
                        if [ ! -d ".venv" ]; then
                            env_name=${1:-".venv"}
                            python3 -m venv "$env_name"
                            echo "Virtual environment '$env_name' has been created."
                        fi
                    '''
                    echo 'Activating the virtual environment'
                    sh '''
                        env_name=${1:-".venv"}
                        chmod +x ./$env_name/bin/activate
                        ./$env_name/bin/activate
                    '''
                    echo 'Dependency installation'
                    sh '''
                        env_name=${1:-".venv"}
                        $env_name/bin/pip3 install -r lab2/requirements.txt
                        echo "Dependencies installed."
                    '''
                }
            }
        }
        stage('Generate train and test dataset') {
            steps {
                echo 'start generate datasets'
                sh '.venv/bin/python3 lab2/src/data_creation.py'
                echo 'finish generate datasets'
            }
        }
        stage('Data preprocessing') {
            steps {
                echo 'start data preprocessing'
                sh '.venv/bin/python3 lab2/src/model_preprocessing.py'
                echo 'finish data preprocessing'
            }
        }
        stage('Create and train model') {
            steps {
                echo 'start create and train model'
                sh '.venv/bin/python3 lab2/src/model_preparation.py'
                echo 'finish create and train model'
            }
        }
        stage('Test model') {
            steps {
                echo 'start testing model'
                sh '.venv/bin/python3 lab2/src/model_testing.py'
                echo 'finish testing model'
            }
        }
    }
    post {
        always {
            echo 'Pipeline has finished.'
        }
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}